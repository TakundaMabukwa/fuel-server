require('dotenv').config();
const axios = require('axios');

async function testSessionsOnly() {
  console.log('üè™ Testing Fuel Consumption for Sites with Sessions Only...\n');
  
  try {
    const response = await axios.get('http://localhost:4000/api/energy-rite/reports/activity', {
      params: { 
        date: '2025-10-30'
      }
    });
    
    console.log('‚úÖ Activity report working!');
    console.log('üìÖ Date:', response.data.data.date);
    console.log('üìä Total Sessions:', response.data.data.summary.total_sessions);
    console.log('üè™ Sites with Activity:', response.data.data.sites.length);
    
    const fuelAnalysis = response.data.data.fuel_analysis;
    console.log('\n‚õΩ Fuel Analysis (Sessions Sites Only):');
    console.log(`   üìä Daily Total: ${fuelAnalysis.daily_total_consumption}L`);
    console.log(`   üèÜ Peak Period: ${fuelAnalysis.peak_usage_period.name} (${fuelAnalysis.peak_usage_period.usage.toFixed(2)}L)`);
    console.log(`   üè™ Peak Site: ${fuelAnalysis.peak_usage_site.site || 'None'} (${fuelAnalysis.peak_usage_site.usage.toFixed(2)}L)`);
    
    console.log('\nüìä Period Breakdown:');
    console.log(`   üåÖ Morning: ${fuelAnalysis.period_breakdown.morning}L`);
    console.log(`   ‚òÄÔ∏è Afternoon: ${fuelAnalysis.period_breakdown.afternoon}L`);
    console.log(`   üåô Evening: ${fuelAnalysis.period_breakdown.evening}L`);
    
    // Show which sites had sessions
    console.log('\nüè™ Sites with Sessions:');
    response.data.data.sites.forEach(site => {
      if (site.session_count > 0) {
        console.log(`   - ${site.branch}: ${site.session_count} sessions`);
      }
    });
    
    console.log('\n‚úÖ Fuel consumption calculated only for sites with sessions!');
    
  } catch (error) {
    console.error('‚ùå Sessions-only test failed:', error.response?.data || error.message);
  }
}

testSessionsOnly();